plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'

    id "com.jfrog.bintray"
    id 'maven-publish'
}


def packagePublishName = 'com.arul.minicamera'
def libraryPublicVersion = '1.0.2'
def libraryPublicDesc = 'Mini Camera implement it without any hassle'


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    viewBinding {
        enabled = true
    }

    dataBinding {
        enabled = true
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'


    // CameraX core library using the camera2 implementation
    def camerax_version = "1.0.0-rc01"
    api "androidx.camera:camera-camera2:${camerax_version}"
    // If you want to additionally use the CameraX Lifecycle library
    api "androidx.camera:camera-lifecycle:${camerax_version}"
    // If you want to additionally use the CameraX View class
    api "androidx.camera:camera-view:1.0.0-alpha20"
    // If you want to additionally use the CameraX Extensions library
    api "androidx.camera:camera-extensions:1.0.0-alpha20"


    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}


publishing {
    publications {
        BintrayPublication(MavenPublication) {
            groupId packagePublishName
            version = libraryPublicVersion
            artifactId project.getName()

            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                // Iterate over the api dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.api.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

bintray {

    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')


    publications = ['BintrayPublication']

    pkg {
        repo = 'Mini-Camera'
        name = 'Mini-Camera'
        userOrg = user //An optional organization name when the repo belongs to one of the user's orgs
        desc = 'what a fantastic package indeed!'
        vcsUrl = 'https://github.com/arulmani33/Mini-CameraX-'
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true

        githubRepo = 'arulmani33/Mini-CameraX-'
        githubReleaseNotesFile = 'README.md'


        version {
            name = libraryPublicVersion
            desc = libraryPublicDesc
            released  = new Date()
            vcsTag = libraryPublicVersion
        }
    }
}